! piecewise_polynomial_approximation.f90
program piecewise_polynomial_approximation
    implicit none
    integer :: n, i
    real, allocatable, dimension(:) :: x, y, a, b, c, d

    ! Input the number of data points
    write (*,*) "Enter the number of data points:"
    read (*,*) n

    ! Allocate memory for the data points and spline coefficients
    allocate(x(n), y(n), a(n), b(n), c(n), d(n))

    ! Input the data points (X, Y)
    write (*,*) "Enter the data points (X, Y) separated by spaces:"
    do i = 1, n
        read (*,*) x(i), y(i)
    end do

    ! Compute the cubic spline coefficients
    call cubic_spline(n, x, y, a, b, c, d)

    ! Display the resulting piecewise polynomial approximation
    write (*,*) "Piecewise polynomial approximation (cubic spline):"
    do i = 1, n - 1
        write (*, '(A, A, A, F10.5, A, F10.5, A, F10.5, A, F10.5)') &
               "S(", i, ") = ", a(i), " + ", b(i), "(x - ", x(i), ") + ", c(i), "(x - ", x(i), ")^2 + ", d(i), "(x - ", x(i), ")^3"
    end do

contains

    ! Compute the cubic spline coefficients for a given set of data points
    subroutine cubic_spline(n, x, y, a, b, c, d)
        integer, intent(in) :: n
        real, intent(in) :: x(n), y(n)
        real, intent(out) :: a(n), b(n), c(n), d(n)
        real, allocatable, dimension(:) :: h, alpha, mu, l, z

        integer :: i

        allocate(h(n-1), alpha(n), mu(n), l(n), z(n))

        ! Step 1: Calculate h(i) and alpha(i)
        do i = 1, n - 1
            h(i) = x(i + 1) - x(i)
            alpha(i + 1) = 3.0 * (y(i + 2) - y(i + 1)) / h(i + 1) - 3.0 * (y(i + 1) - y(i)) / h(i)
        end do

        ! Step 2: Solve for coefficients mu, l, z using the tridiagonal system
        mu(1) = 0.0
        l(1) = 1.0
        z(1) = 0.0

        do i = 2, n - 1
            mu(i) = h(i - 1) / (2.0 * (h(i - 1) + h(i)))
            l(i) = 2.0 - mu(i)
            z(i) = (alpha(i) - mu(i) * z(i - 1)) / l(i)
        end do

        mu(n) = 0.0
        l(n) = 1.0
        z(n) = 0.0 
        
          ! Step 3: Solve for the spline coefficients a, b, c, d
    c(n) = 0.0

    do i = n - 1, 1, -1
        c(i) = z(i) - mu(i + 1) * c(i + 1)
        b(i) = (y(i + 1) - y(i)) / h(i) - h(i) * (c(i + 1) + 2.0 * c(i)) / 3.0
        d(i) = (c(i + 1) - c(i)) / (3.0 * h(i))
        a(i) = y(i)
    end do

    ! Deallocate temporary arrays
    deallocate(h, alpha, mu, l, z)

end subroutine cubic_spline

end program piecewise_polynomial_approximation
