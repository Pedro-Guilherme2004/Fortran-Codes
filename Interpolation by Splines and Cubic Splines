! cubic_spline_interpolation.f90
program cubic_spline_interpolation
    implicit none
    integer :: n, i, query_n
    real, allocatable, dimension(:) :: x, y, a, b, c, d
    real :: query_x, query_y

    ! Input the number of data points
    write (*,*) "Enter the number of data points:"
    read (*,*) n

    ! Allocate memory for the data points and spline coefficients
    allocate(x(n), y(n), a(n), b(n), c(n), d(n))

    ! Input the data points (X, Y)
    write (*,*) "Enter the data points (X, Y) separated by spaces:"
    do i = 1, n
        read (*,*) x(i), y(i)
    end do

    ! Compute the cubic spline coefficients
    call cubic_spline(n, x, y, a, b, c, d)

    ! Input the number of x values to interpolate
    write (*,*) "Enter the number of x values to interpolate:"
    read (*,*) query_n

    ! Interpolate y values for each query x
    do i = 1, query_n
        write (*,*) "Enter the x value for interpolation:"
        read (*,*) query_x
        call interpolate_y(n, x, a, b, c, d, query_x, query_y)
        write (*,*) "Interpolated y value at x =", query_x, "is y =", query_y
    end do

contains

    ! Compute the cubic spline coefficients for a given set of data points
    subroutine cubic_spline(n, x, y, a, b, c, d)
        integer, intent(in) :: n
        real, intent(in) :: x(n), y(n)
        real, intent(out) :: a(n), b(n), c(n), d(n)
        real, allocatable, dimension(:) :: h, alpha, mu, l, z
        integer :: i

        allocate(h(n-1), alpha(n), mu(n), l(n), z(n))

        ! Calculate h(i) and alpha(i)
        do i = 1, n - 1
            h(i) = x(i + 1) - x(i)
            alpha(i + 1) = 3.0 * (y(i + 2) - y(i + 1)) / h(i + 1) - 3.0 * (y(i + 1) - y(i)) / h(i)
        end do

        ! Solve for coefficients mu, l, z using the tridiagonal system
        mu(1) = 0.0
        l(1) = 1.0
        z(1) = 0.0

        do i = 2, n - 1
            mu(i) = h(i - 1) / (2.0 * (h(i - 1) + h(i)))
            l(i) = 2.0 - mu(i)
            z(i) = (alpha(i) - mu(i) * z(i - 1)) / l(i)
        end do

        mu(n) = 0.0
        l(n) = 1.0
        z(n) = 0.0

        ! Solve for the spline coefficients a, b, c, d
        c(n) = 0.0
        do i = n - 1, 1, -1
        
                    c(i) = z(i) - mu(i + 1) * c(i + 1)
            b(i) = (y(i + 1) - y(i)) / h(i) - h(i) * (c(i + 1) + 2.0 * c(i)) / 3.0
            d(i) = (c(i + 1) - c(i)) / (3.0 * h(i))
            a(i) = y(i)
        end do

        ! Deallocate temporary arrays
        deallocate(h, alpha, mu, l, z)
    end subroutine cubic_spline

    ! Interpolate the y value for a given x value using cubic spline coefficients
    subroutine interpolate_y(n, x, a, b, c, d, query_x, query_y)
        integer, intent(in) :: n
        real, intent(in) :: x(n), a(n), b(n), c(n), d(n), query_x
        real, intent(out) :: query_y
        integer :: i, segment

        ! Find the appropriate segment for the query_x value
        segment = -1
        do i = 1, n - 1
            if (query_x >= x(i) .and. query_x <= x(i + 1)) then
                segment = i
                exit
            end if
        end do

        if (segment == -1) then
            write (*,*) "The x value is outside the range of the data points."
            return
        end if

        ! Compute the interpolated y value for the query_x value
        query_y = a(segment) + b(segment) * (query_x - x(segment)) + &
                  c(segment) * (query_x - x(segment))**2 + d(segment) * (query_x - x(segment))**3
    end subroutine interpolate_y

end program cubic_spline_interpolation

